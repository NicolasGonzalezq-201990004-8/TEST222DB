// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: lester.proto

package lesterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LesterService_GetOffer_FullMethodName        = "/lester.LesterService/GetOffer"
	LesterService_NotifyDecision_FullMethodName  = "/lester.LesterService/NotifyDecision"
	LesterService_QueryPoliceRisk_FullMethodName = "/lester.LesterService/QueryPoliceRisk"
	LesterService_StartStars_FullMethodName      = "/lester.LesterService/StartStars"
	LesterService_StopStars_FullMethodName       = "/lester.LesterService/StopStars"
	LesterService_ConfirmPayment_FullMethodName  = "/lester.LesterService/ConfirmPayment"
)

// LesterServiceClient is the client API for LesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== Servicio =====
type LesterServiceClient interface {
	GetOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferReply, error)
	NotifyDecision(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Ack, error)
	// Para fases siguientes (si las implementas):
	QueryPoliceRisk(ctx context.Context, in *RiskReq, opts ...grpc.CallOption) (*RiskReply, error)
	StartStars(ctx context.Context, in *StarsCtrl, opts ...grpc.CallOption) (*Ack, error)
	StopStars(ctx context.Context, in *StarsCtrl, opts ...grpc.CallOption) (*Ack, error)
	ConfirmPayment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentReply, error)
}

type lesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLesterServiceClient(cc grpc.ClientConnInterface) LesterServiceClient {
	return &lesterServiceClient{cc}
}

func (c *lesterServiceClient) GetOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferReply)
	err := c.cc.Invoke(ctx, LesterService_GetOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) NotifyDecision(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, LesterService_NotifyDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) QueryPoliceRisk(ctx context.Context, in *RiskReq, opts ...grpc.CallOption) (*RiskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RiskReply)
	err := c.cc.Invoke(ctx, LesterService_QueryPoliceRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) StartStars(ctx context.Context, in *StarsCtrl, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, LesterService_StartStars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) StopStars(ctx context.Context, in *StarsCtrl, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, LesterService_StopStars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) ConfirmPayment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentReply)
	err := c.cc.Invoke(ctx, LesterService_ConfirmPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LesterServiceServer is the server API for LesterService service.
// All implementations must embed UnimplementedLesterServiceServer
// for forward compatibility.
//
// ===== Servicio =====
type LesterServiceServer interface {
	GetOffer(context.Context, *OfferRequest) (*OfferReply, error)
	NotifyDecision(context.Context, *Decision) (*Ack, error)
	// Para fases siguientes (si las implementas):
	QueryPoliceRisk(context.Context, *RiskReq) (*RiskReply, error)
	StartStars(context.Context, *StarsCtrl) (*Ack, error)
	StopStars(context.Context, *StarsCtrl) (*Ack, error)
	ConfirmPayment(context.Context, *PaymentReq) (*PaymentReply, error)
	mustEmbedUnimplementedLesterServiceServer()
}

// UnimplementedLesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLesterServiceServer struct{}

func (UnimplementedLesterServiceServer) GetOffer(context.Context, *OfferRequest) (*OfferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffer not implemented")
}
func (UnimplementedLesterServiceServer) NotifyDecision(context.Context, *Decision) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDecision not implemented")
}
func (UnimplementedLesterServiceServer) QueryPoliceRisk(context.Context, *RiskReq) (*RiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoliceRisk not implemented")
}
func (UnimplementedLesterServiceServer) StartStars(context.Context, *StarsCtrl) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStars not implemented")
}
func (UnimplementedLesterServiceServer) StopStars(context.Context, *StarsCtrl) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStars not implemented")
}
func (UnimplementedLesterServiceServer) ConfirmPayment(context.Context, *PaymentReq) (*PaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPayment not implemented")
}
func (UnimplementedLesterServiceServer) mustEmbedUnimplementedLesterServiceServer() {}
func (UnimplementedLesterServiceServer) testEmbeddedByValue()                       {}

// UnsafeLesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LesterServiceServer will
// result in compilation errors.
type UnsafeLesterServiceServer interface {
	mustEmbedUnimplementedLesterServiceServer()
}

func RegisterLesterServiceServer(s grpc.ServiceRegistrar, srv LesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LesterService_ServiceDesc, srv)
}

func _LesterService_GetOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).GetOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_GetOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).GetOffer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_NotifyDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).NotifyDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_NotifyDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).NotifyDecision(ctx, req.(*Decision))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_QueryPoliceRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).QueryPoliceRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_QueryPoliceRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).QueryPoliceRisk(ctx, req.(*RiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_StartStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarsCtrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).StartStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_StartStars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).StartStars(ctx, req.(*StarsCtrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_StopStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarsCtrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).StopStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_StopStars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).StopStars(ctx, req.(*StarsCtrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_ConfirmPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).ConfirmPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_ConfirmPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).ConfirmPayment(ctx, req.(*PaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LesterService_ServiceDesc is the grpc.ServiceDesc for LesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lester.LesterService",
	HandlerType: (*LesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOffer",
			Handler:    _LesterService_GetOffer_Handler,
		},
		{
			MethodName: "NotifyDecision",
			Handler:    _LesterService_NotifyDecision_Handler,
		},
		{
			MethodName: "QueryPoliceRisk",
			Handler:    _LesterService_QueryPoliceRisk_Handler,
		},
		{
			MethodName: "StartStars",
			Handler:    _LesterService_StartStars_Handler,
		},
		{
			MethodName: "StopStars",
			Handler:    _LesterService_StopStars_Handler,
		},
		{
			MethodName: "ConfirmPayment",
			Handler:    _LesterService_ConfirmPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lester.proto",
}
